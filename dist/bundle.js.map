{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,uDAAuD;AACvD;AACA;AACA;AACA,0MAA0M,cAAc;AACxN,8BAA8B,sBAAsB;AACpD,0BAA0B,YAAY,sBAAsB,qCAAqC,2CAA2C,MAAM;AAClJ,4BAA4B,MAAM,iBAAiB,YAAY;AAC/D,uBAAuB;AACvB,8BAA8B;AAC9B,6BAA6B;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,2BAA2B;AAC/D;AACA;AACA,eAAe,WAAW,IAAI,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA,eAAe;AACf,eAAe;AACf;AACA,kBAAkB;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+CAA+C,eAAe,0CAA0C,eAAe;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO,EAAE,gBAAgB;AAC5C,CAAC;AACD;AACA,oBAAoB,8BAA8B;AAClD;AACA,mBAAmB,OAAO,EAAE,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA,YAAY;AACZ,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,EAAE,WAAW,EAAE,UAAU;AAC/C;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,eAAe,iBAAiB,QAAQ,eAAe;AAC7F;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA,KAAK;AACL;AACA,6BAA6B,sCAAsC,KAAK,KAAK;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,4BAA4B,aAAa,OAAO,eAAe,WAAW,GAAG,kBAAkB,KAAK;AACpG;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;UE5WA;UACA;UACA;UACA;UACA","sources":["webpack://curso-typescript/./src/index.ts","webpack://curso-typescript/webpack/before-startup","webpack://curso-typescript/webpack/startup","webpack://curso-typescript/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nconsole.log(\"Hola Mundo\");\n//Declaracion de Variables\n/*\nTipos de Datos\n-------------------------\nstring\nnumber - Enteros y decimales\nbooleans - true / false\nany (Cualquiera Pero no lo usaremos)\nnull - Valor nulo\nundefined - Datos indefinidos\n--------------------------------------\n*/\n//Variables glovales\nvar texto = \"Soy un texto\";\nvar numero = 1;\nvar bandera = true;\nvar nulo = null;\n//Variables locales\nlet apellido = \"Duran\";\n//Constantes\nconst PI = 3.1415;\n//Concatenar\nconsole.log(\"Hola \" + texto);\nconsole.log(texto, apellido);\n//Inyectar Variables (Vamos a usarlo Mucho)\nconsole.log(`Hola ${texto}`);\n//Declarar Variables en la misma linea\nlet a, b, c;\na = \"Pepito\";\nb = 33;\nc = true;\n//Declaracion de Array\nlet alumnos = [\"Alex\", \"Juan\", \"Jesus\"];\nlet alumnos2 = [\"Fran\"];\n//Integracion de varios arrays en uno\nlet alumnosTotal = [...alumnos, ...alumnos2];\n// A diferencia de Java se puede poner diferentes tipos de datos en el array\nlet valores = [\"Hola\", 66];\n//Definicion de Objetos\nlet misDatos = {\n    nombre: \"Juan Antonio\",\n    apellido: \"Duran Fernancez\",\n    edad: 20\n};\n//Se puede Integrar como en el array\nlet configuracion = Object.assign({ audio: 20, video: \"1080p\" }, misDatos);\nlet propiedad1 = misDatos.nombre;\nlet propiedad2 = configuracion.video;\nconsole.log(`${propiedad1}, ${propiedad2}`);\n//Declaracion de enumerados Si hacemos console log nos dara la clave del nombre del Proceso.\nvar EstadoTarea;\n(function (EstadoTarea) {\n    EstadoTarea[\"Pendiente\"] = \"P\";\n    EstadoTarea[\"EnProceso\"] = \"E\";\n    EstadoTarea[\"Terminado\"] = \"T\";\n})(EstadoTarea || (EstadoTarea = {}));\n;\nconsole.log(EstadoTarea.Terminado);\nlet tarea0 = { nombre: \"Tarea0\", prioridad: 1, estado: EstadoTarea.EnProceso };\nlet tarea1 = { nombre: \"Tarea1\", prioridad: 2, estado: EstadoTarea.Pendiente };\n//Fusionar Tipos\nlet empleado1 = { nombre: \"Juanan\", edad: 20, sueldo: 0 };\nlet jefe;\njefe = { id: \"13342\", nombre: \"Juani\", edad: 20, sueldo: 1300 };\nconsole.log(empleado1.edad);\nconsole.log(jefe.id);\n// Operador Ternario \n//condicion ? verdadero : falso\nconsole.log(tarea0.estado == \"E\" ? `La tarea ${tarea0.nombre} se encuentra en ejecucion ` : `La tarea ${tarea0.nombre} no se encuentra en ejecucion`);\n//Estructura if else\nif (tarea1 != tarea0) {\n    console.log(\"No es igual\");\n}\nelse if (tarea0 == tarea1) {\n    console.log(\"Es igual\");\n}\nelse {\n    console.log(\"ERROR\");\n}\n//Estructura Switch\nswitch (tarea1.estado) {\n    case \"E\":\n        console.log(\"Tarea en proceso\");\n        break;\n    case \"P\":\n        console.log(\"tarea Pendiente\");\n        break;\n    case \"T\":\n        console.log(\"tarea terminada\");\n}\n//try catch\ntry {\n    let numero1 = 70;\n    console.log(numero1.toString);\n}\ncatch (error) {\n    console.log(\"Se a producido un error\", error);\n}\n//Bucles\nlet listaEmpleado = [\n    {\n        nombre: \"Manolo\",\n        edad: 18,\n        sueldo: 1000\n    },\n    {\n        nombre: \"Pepe\",\n        edad: 24,\n        sueldo: 2000\n    },\n    {\n        nombre: \"Paco\",\n        edad: 40,\n        sueldo: 5000\n    }\n];\n//Declaracion Bucle For each\nlistaEmpleado.forEach(\n//funcion Flecha \n(empleado, index) => {\n    console.log(`${index} ${empleado.nombre}`);\n});\n//Declaracion For\nfor (let index = 0; index < listaEmpleado.length; index++) {\n    const empleado = listaEmpleado[index];\n    console.log(`${index} ${empleado.nombre}`);\n}\n//Bucles While\nwhile (tarea1.estado !== EstadoTarea.EnProceso) {\n    if (tarea1.prioridad <= 5) {\n        tarea1.estado = EstadoTarea.EnProceso;\n        break;\n    }\n    else {\n        tarea1.prioridad++;\n    }\n}\n//do while se ejecuta al menos una vez\ndo {\n    if (tarea0.prioridad <= 5) {\n        tarea1.estado = EstadoTarea.Terminado;\n        break;\n    }\n    else {\n        tarea0.prioridad++;\n    }\n} while (tarea0.estado !== EstadoTarea.Terminado);\n//Funciones\n/**\n * Funcion que muestra un saludo por consola\n */\nfunction saludar() {\n    let nombre = \"Juan\";\n    console.log(\"Hola \" + nombre);\n}\n//Ejecutar funciones\nsaludar();\n/**\n *\n * @param nombre nombre de una persona a saludar\n */\nfunction saludar1(nombre) {\n    console.log(\"Hola \" + nombre);\n}\nsaludar1(\"Eduardo\");\n//Funcion con valor por defecto\nfunction despedir(nombre = \"Pepe\") {\n    console.log(`Adios ${nombre}!`);\n}\ndespedir(); //Adios Pepe\ndespedir(\"Anastasio\"); //Adios Anastasio\n//Funcion con valor opcional\nfunction despedirOpcional(nombre) {\n    if (nombre) {\n        console.log(\"Adios\" + nombre);\n    }\n    else {\n        console.log(\"Chaito\");\n    }\n}\ndespedirOpcional(\"Juani\");\n//Funcion de varios valores\nfunction variosTipos(a) {\n    if (typeof { a } == 'string') {\n        console.log(\"A es un string\");\n    }\n    else {\n        console.log(\"A es un number\");\n    }\n}\n//funciones con return De diferentes valores para una sola variabe\nfunction ejemploReturn(nombre, apellidos, direccion) {\n    return `${nombre} ${apellidos} ${direccion}`;\n}\nvar nombreComp = ejemploReturn(\"Pepe\", \"San Jose\", 4);\n// funciones anonimas \nlet fanonima = function () { console.log(\"Hola Mundo\"); };\nfanonima();\n//Funciones de multiples Parametros\nfunction ejemploMultiple(...nombres) {\n    nombres.forEach((nombre) => {\n        console.log(nombre);\n    });\n}\n//Se le puede pasar un array con el ...NombreArray\nejemploMultiple(\"Martin\", \"Pepe\", \"Juan\");\n//Arrow Functions\nlet empleado = {\n    nombre: \"Juanjo\",\n    edad: 4,\n    sueldo: 56\n};\nlet mostrarEmpleado = (empleado) => { console.log(`${empleado.nombre} tiene ${empleado.edad} años`); };\nmostrarEmpleado(empleado);\nlet datosEmpleado = (empleado) => {\n    if (empleado.edad > 20) {\n        return `Empleado ${empleado.nombre} Puede trabajar`;\n    }\n    else {\n        return `Empleado ${empleado.nombre} no puede trabajar`;\n    }\n    mostrarEmpleado(empleado);\n};\ndatosEmpleado(empleado);\n//Assync Functions\nfunction ejemploAssync() {\n    return __awaiter(this, void 0, void 0, function* () {\n        yield console.log(\"Tarea a completar antes de seguir con la secuencia de instrucciones\");\n        console.log(\"Completado\");\n        return \"Completado\";\n    });\n}\nejemploAssync().then((respuesta) => {\n    console.log(\"Respuesta\", respuesta);\n});\n//Ejemplo asincrona \nfunction asincrona() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let suma = 0;\n        for (let i = 0; i < 10000; i++) {\n            suma += i;\n        }\n        return suma;\n    });\n}\nasincrona().then((data) => { console.log(`El resultado assync es ${data}`); });\nconsole.log(\"Linea de codigo posterior a asincrona\");\nfunction getDataUniversity() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const data = yield fetch(\"http://universities.hipolabs.com/search?country=Spain\");\n        let respuesta = yield data.json();\n        return respuesta;\n    });\n}\ngetDataUniversity().then((data) => {\n    for (let i = 0; i < data.length; i++) {\n        console.log(\"Universidad\" + data[i].name);\n    }\n});\n//Generators\nfunction* fgeneradora() {\n    for (let empleado in listaEmpleado) {\n        yield listaEmpleado[empleado];\n    }\n}\nlet funciongen = fgeneradora();\n//Devuelve un Empleado\nconsole.log(funciongen.next());\nfunction* ejemploGenerator() {\n    let index = 0;\n    while (index < 5) {\n        yield index++;\n    }\n}\nfunction* fgeneradora2() {\n    yield \"hola\";\n    yield \"mundo\";\n    yield \"IES\";\n}\nlet llamadafGen2 = fgeneradora2();\nconsole.log(llamadafGen2.next);\nfunction obtenerDatosWeb() {\n    return __asyncGenerator(this, arguments, function* obtenerDatosWeb_1() {\n        let peticion = yield __await(fetch(\"https://haveibeenpwned.com/api/v2/breaches\"));\n        let datos = yield __await(peticion.json());\n        for (let i = 0; i < datos.length; i++) {\n            yield yield __await(datos[i]);\n        }\n        //For each no se puede usar dentro del callback\n    });\n}\nlet datosWebPage = obtenerDatosWeb();\ndatosWebPage.next().then(({ value, done }) => { console.log(`${value.Name}-${value.Descripcion}`); });\n//Guardamos la funcion generadora en una variable\nlet generadora = ejemploGenerator();\n//Accedemos a los valores emitidos\nconsole.log(generadora.next().value); //Accedemos al siguiente valor\n//Workers \nfunction* watcher(valor) {\n    yield valor;\n    yield* worker(valor);\n    yield valor + 10;\n}\nfunction* worker(valor) {\n    yield valor + 1;\n    yield valor + 2;\n    yield valor + 3;\n}\nlet generatorSaga = watcher(0);\nconsole.log(generatorSaga.next().value);\n/**\n * C\n * @param a\n * @param b\n * @returns\n *\n * CallBack\n */\nlet suma = function suma(a, b) {\n    return a + b;\n};\nlet resta = function resta(a, b) {\n    return a - b;\n};\nfunction opera(x, y, funcion) {\n    return funcion(x, y);\n}\nconsole.log(\"Suma \" + opera(12, 34, suma)); //Una funcion pasa una funcion y recoje los parametors\nopera(34, 23, resta);\nconsole.log(\"HOla aqui estoy\");\nfunction saludarSobrecarga(nombre, apellido, edad) {\n    let saludo = `Hola ${nombre}`;\n    if (apellido != undefined) {\n        saludo = saludo + apellido;\n    }\n    if (edad != undefined) {\n        saludo = saludo + edad;\n    }\n    return saludo;\n}\nconsole.log(saludarSobrecarga(\"Pepe\", \"Juan\", \"45\"));\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/index.ts\"]();\n",""],"names":[],"sourceRoot":""}